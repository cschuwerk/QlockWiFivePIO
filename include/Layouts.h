/******************************************************************************
  Layouts.h
******************************************************************************/

#ifndef LAYOUTS_H
#define LAYOUTS_H


typedef struct layout_s {
  uint8_t matrix[10][11];
  uint8_t corners[4];
  uint8_t alarm;
  uint8_t ledsPerLetter;
  uint8_t ledsPerCorner;
  uint8_t ledsPerAlarm;
} layout_t;

const layout_t layouts[] = {
	// Default
	{
		{
			{0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10},
			{21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11},
			{22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32},
			{43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33},
			{44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54},
			{65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55},
			{66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76},
			{87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77},
			{88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98},
			{109,108,107,106,105,104,103,102,101,100,99}
		},
		{110, 111, 112, 113},
		114,
		1,
		1,
		1
	},
	// QlockWiFive
	{
		{
			{0, 19, 20, 39, 40, 59, 60, 79, 80, 99, 100},
			{1, 18, 21, 38, 41, 58, 61, 78, 81, 98, 101},
			{2, 17, 22, 37, 42, 57, 62, 77, 82, 97, 102},
			{3, 16, 23, 36, 43, 56, 63, 76, 83, 96, 103},
			{4, 15, 24, 35, 44, 55, 64, 75, 84, 95, 104},
			{5, 14, 25, 34, 45, 54, 65, 74, 85, 94, 105},
			{6, 13, 26, 33, 46, 53, 66, 73, 86, 93, 106},
			{7, 12, 27, 32, 47, 52, 67, 72, 87, 92, 107},
			{8, 11, 28, 31, 48, 51, 68, 71, 88, 91, 108},
			{9, 10, 29, 30, 49, 50, 69, 70, 89, 90, 109}
		},
		{112, 111, 110, 113},
		114,
		1,
		1,
		1
	},
	// QlockWiFive Mini
	{
		{
			{1, 21, 22, 41, 42, 61, 63, 82, 83, 102,104},
			{2, 20, 23, 40, 43, 60, 64, 81, 84, 101,105},
			{3, 19, 24, 39, 44, 59, 65, 80, 85, 100,106},
			{4, 18, 25, 38, 45, 58, 66, 79, 86, 99, 107},
			{5, 17, 26, 37, 46, 57, 67, 78, 87, 98, 108},
			{6, 16, 27, 36, 47, 56, 68, 77, 88, 97, 109},
			{7, 15, 28, 35, 48, 55, 69, 76, 89, 96, 110},
			{8, 14, 29, 34, 49, 54, 70, 75, 90, 95, 111},
			{9, 13, 30, 33, 50, 53, 71, 74, 91, 94, 112},
			{10,12, 31, 32, 51, 52, 72, 73, 92, 93, 113}
		},
		{0, 103, 114, 11},
		62,
		1,
		1,
		1
	},
	// QlockWiFive XXL
	{
		{
			{0, 38, 40, 78, 80,118,120,158,160,198, 200},
			{2, 36, 42, 76, 82,116,122,156,162,196, 202},
			{4, 34, 44, 74, 84,114,124,154,164,194, 204},
			{6, 32, 46, 72, 86,112,126,152,166,192, 206},
			{8, 30, 48, 70, 88,110,128,150,168,190, 208},
			{10,28, 50, 68, 90,108,130,148,170,188, 210},
			{12,26, 52, 66, 92,106,132,146,172,186, 212},
			{14,24, 54, 64, 94,104,134,144,174,184, 214},
			{16,22, 56, 62, 96,102,136,142,176,182, 216},
			{18,20, 58, 60, 98,100,138,140,178,180, 218}
		},
		{222, 221, 220, 223},
		224,
		2,
		1,
		1
	},
	// CLT
	{
		{
			{0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10},
			{23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13},
			{24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34},
			{47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37},
			{48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58},
			{71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61},
			{72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82},
			{95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85},
			{96, 97, 98, 99, 100,101,102,103,104,105,106},
			{119,118,117,116,115,114,113,112,111,110,109}
		},
		{122, 124, 126, 120},
		128,
		1,
		1,
		1
	},
	// CLT 2
	{
		{
			{1, 21, 22, 41, 42, 61, 62, 81, 82, 101,103},
			{2, 20, 23, 40, 43, 60, 63, 80, 83, 100,104},
			{3, 19, 24, 39, 44, 59, 64, 79, 84, 99, 105},
			{4, 18, 25, 38, 45, 58, 65, 78, 85, 98, 106},
			{5, 17, 26, 37, 46, 57, 66, 77, 86, 97, 107},
			{6, 16, 27, 36, 47, 56, 67, 76, 87, 96, 108},
			{7, 15, 28, 35, 48, 55, 68, 75, 88, 95, 109},
			{8, 14, 29, 34, 49, 54, 69, 74, 89, 94, 110},
			{9, 13, 30, 33, 50, 53, 70, 73, 90, 93, 111},
			{10,12, 31, 32, 51, 52, 71, 72, 91, 92, 112}
		},
		{0, 102, 113, 11},
		114,
		1,
		1,
		1
	},
};

const char sLayoutStr[][20] PROGMEM =
{
	"Default",
	"QlockWiFive",
	"QlockWiFive Mini",
	"QlockWiFive XXL",
	"CLT",
	"CLT 2",
};

enum eLayout : uint8_t{
	E_LAYOUT_DEFAULT,
	E_LAYOUT_WIFIVE,
	E_LAYOUT_WIFIVE_MINI,
	E_LAYOUT_WIFIVE_XXL,
	E_LAYOUT_CLT,
	E_LAYOUT_CLT2,

	E_LAYOUT_MAX
} ;

inline uint16_t getLedsCount(eLayout eLayout){
	uint16_t maxLedNum = 0;
	const layout_t* layout = &layouts[eLayout];
	for(uint8_t y = 0; y < sizeof(layout->matrix)/sizeof(layout->matrix[0]); y++){
		for(uint8_t x = 0; x < sizeof(layout->matrix[0])/sizeof(layout->matrix[0][0]); x++){
			if (layout->matrix[y][x] > maxLedNum)
				maxLedNum = layout->matrix[y][x] + (layout->ledsPerLetter - 1);
		}
	}

	for(uint8_t i = 0; i < sizeof(layout->corners)/sizeof(layout->corners[0]); i++){
		if (layout->corners[i] > maxLedNum)
			maxLedNum = layout->corners[i] + (layout->ledsPerCorner - 1);
	}

	if (layout->alarm > maxLedNum)
		maxLedNum = layout->alarm + (layout->ledsPerAlarm - 1);

	return maxLedNum + 1;
}

#endif // LAYOUTS_H
